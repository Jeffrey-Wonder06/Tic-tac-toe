<!DOCTYPE html>
<html>
<head>
    <title>Checkers Game</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="game-container">
        <div class="board"></div>
        <div class="player-info">
            <div class="player-turn">Player 1's Turn</div>
            <div class="game-status"></div>
        </div>
    </div>
    <script src="script.js"></script>
</body>
</html>
.game-container {
    display: flex;
    flex-direction: column;
    align-items: center;
}
.board {
    display: grid;
    grid-template-columns: repeat(8, 50px);
    grid-template-rows: repeat(8, 50px);
    border: 2px solid black;
}
.square {
    width: 50px;
    height: 50px;
    border: 1px solid #ccc;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
}
.square.light {
    background-color: #f0f0f0; 
}
.square.dark {
    background-color: #000; 
    color: white;
}
.piece {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: red; 
    color: white;
    display: flex;
    justify-content: center;
    align-items: center;
}
.piece.white {
    background-color: white; 
    color: black; 
}
.piece.king {
    background-color: gold; 
}
.player-info {
    margin-top: 20px;
}
.player-turn {
    font-size: 18px;
    font-weight: bold;
}
.game-status {
    margin-top: 10px;
    color: green; /* Initial status */

}const board = document.querySelector('.board');
const playerTurn = document.querySelector('.player-turn');
const gameStatus = document.querySelector('.game-status');
// Board setup (8x8 grid)
const boardArray = [
    ['B', ' ', 'B', ' ', 'B', ' ', 'B', ' '],
    [' ', 'B', ' ', 'B', ' ', 'B', ' ', 'B'],
    ['B', ' ', 'B', ' ', 'B', ' ', 'B', ' '],
    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
    ['W', ' ', 'W', ' ', 'W', ' ', 'W', ' '],
    [' ', 'W', ' ', 'W', ' ', 'W', ' ', 'W'],
    ['W', ' ', 'W', ' ', 'W', ' ', 'W', ' ']
];
// Player turn
let currentPlayer = 'W'; // White starts
// Game status
let gameOver = false;
// Function to create and display the board
function createBoard() {
    for (let row = 0; row < 8; row++) {
        for (let col = 0; col < 8; col++) {
            const square = document.createElement('div');
            square.classList.add('square');
            square.classList.add((row + col) % 2 === 0 ? 'light' : 'dark'); // Alternating colors
            square.dataset.row = row; // Store row and col for reference
            square.dataset.col = col;
            
            // Add piece to square
            if (boardArray[row][col] !== ' ') {
                const piece = document.createElement('div');
                piece.classList.add('piece');
                piece.classList.add(boardArray[row][col]); // 'W' or 'B'
                square.appendChild(piece);
            }
            board.appendChild(square);
        }
    }
}
// Handle square clicks
board.addEventListener('click', (event) => {
    if (gameOver) return;
    const clickedSquare = event.target;
    const row = parseInt(clickedSquare.dataset.row);
    const col = parseInt(clickedSquare.dataset.col);
    // ... (Implement game logic here, including selecting pieces, making moves, checking for captures, etc.)
    
    // Update the UI (boardArray and HTML)
    updateBoard();
    // Switch turns
    switchPlayer();
});
// Update board display based on boardArray
function updateBoard() {
    // ... (Update the HTML elements based on the boardArray data)
}
// Switch player turn
function switchPlayer() {
    currentPlayer = currentPlayer === 'W' ? 'B' : 'W';
    playerTurn.textContent = `${currentPlayer === 'W' ? 'White' : 'Black'}'s Turn`;
}
// ... (Additional game logic functions for move validation, capturing, king promotion, etc.)
// Start the game
createBoard();
switchPlayer(); // Start with White's turn
